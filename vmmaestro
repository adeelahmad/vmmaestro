#! /bin/bash
################################################################################
#
#  vmmaestro - Tiny KVM wrapper
#
#  Copyright (C) 2014 Koichi MATSUMOTO.  All rights reserved.
#
################################################################################

#E=echo

use_sudo='y'

########################################
#### System
########################################

SYSDIR='/etc/vmmaestro'
DEF_NIC='virtio'
DEF_DISKIF='virtio'

boot_qemu_delay=10

########################################
#### Preset Default values
########################################
function set_default_values
{
  user.runas='kvm'
  cpu.model='host'
  cpu.units=1
  memory.vmem=1024
  memory.balloon='y'
  display.type='vnc'
  graphics.type='std'
  vnc.addr='127.0.0.1'
  spice.addr='127.0.0.1'
  vnc.number='0'
  spice.tls='n'
  spice.sasl='n'
  clock.utctime='y'
  clock.sync_host='y'
  cdrom.if='ide'
  disk_num=0
}

########################################
#### check args
########################################

if [[ $# < 2 ]]; then
  cmds='[start|consolestart|stop|shutdown|restart|kill|console|monitor|status]'
  echo 'Usage: '$0' '$cmds' vm-name,...'
  exit 1
fi

########################################
#### create startup command line
########################################
##############################
#### create CPU
##############################
function create_cpu
{
  cpu_args='-cpu '$cpu.model' -smp '$cpu.units
  
  if [[ x$cpu.cores != x ]]; then
    cpu_args=$cpu_args',cores='$cpu.cores
  fi
  if [[ x$cpu.threads != x ]]; then
    cpu_args=$cpu_args',threads='$cpu.threads
  fi
  if [[ x$cpu.sockets != x ]]; then
    cpu_args=$cpu_args',sockets='$cpu.sockets
  fi
}

##############################
#### create Memory
##############################
function create_mem
{
  mem_args='-m '$memory.vmem
  if [[ $memory.balloon == 'n' ]]; then
    mem_args=$mem_args' -balloon none'
  else
    mem_args=$mem_args' -balloon virtio'
  fi
}

##############################
#### creete drive args
##############################
function create_disk_drive
{
  disk_args=""
  idx=0
  while [[ x${disk.lv[$idx]} != x ]];
  do
    if [[ x$vg.name != x ]]; then
        disk_drive=/dev/$vg.name/${disk.lv[$idx]}
        if [[ ! -b $disk_drive ]]; then
            echo "Specified block device does not exist: "${disk.lv[$idx]}
            exit 10
        fi
    else
        disk_drive=${disk.lv[$idx]}
        if [[ ! -f $disk_drive ]]; then
            echo "Specified disk file does not exist: "$disk_drive
            exit 10
        fi
    fi
    if [[ x${disk.if[$idx]} == x ]]; then
      disk.if[$idx]=$DEF_DISKIF
    fi
    case "${disk.if[$idx]}" in
      "ide")      ;;
      "scsi")     ;;
      "virtio")   ;;
      *)
        echo "Unknown disk interface: "${disk.if[$idx]}
        exit 10
        ;;
    esac
    if [[ x${disk.dp[$idx]} == x ]]; then
      disk.dp[$idx]='n'
    fi
    if [[ ${disk.dp[$idx]} == 'y' ]]; then
      drive_id='drive'$idx
      disk_args=$disk_args' -drive if=none,id='$drive_id',cache=none,'
      disk_args=$disk_args'aio=native,format=raw,file='$disk_drive
      disk_args=$disk_args',index='$idx',media=disk'
      disk_args=$disk_args' -device virtio-blk,drive='$drive_id
      disk_args=$disk_args',scsi=off,config-wce=off,x-data-plane=on'
    else
      if [[ x${disk.aio[$idx]} == x ]]; then
        disk.aio[$idx]='native'
      fi
      case "${disk.aio[$idx]}" in
        "native")   ;;
        "threads")  ;;
        *)
          echo "Unknown AIO type: "${disk.aio[$idx]}
          exit 10
          ;;
      esac
      disk_args=$disk_args' -drive if='${disk.if[$idx]}',aio='${disk.aio[$idx]}
      if [[ x${disk.fmt[$idx]} != x ]]; then
        disk_args=$disk_args',format='${disk.fmt[$idx]}
      fi
      disk_args=$disk_args',file='$disk_drive
      disk_args=$disk_args',index='$idx',media=disk'
    fi
    ((idx=idx+1))
  done
  disk_num=$idx
}

##############################
#### creete floppy disk
##############################
function create_floppy
{
  fd_args=""
  if [[ x$floppy.drive1 != x ]];
    fd_file=$floppy.drive1
    if [[ ! -f $floppy.drive1 ]]; then
        echo "Specified floppy file does not exist: "$floppy.drive1
        exit 12
    fi
    fd_args=$fd_args' -drive file='$floppy.drive1',if=floppy,index=0'
  fi
  if [[ x$floppy.drive2 != x ]];
    fd_file=$floppy.drive2
    if [[ ! -f $floppy.drive2 ]]; then
        echo "Specified floppy file does not exist: "$floppy.drive2
        exit 12
    fi
    fd_args=$fd_args' -drive file='$floppy.drive2',if=floppy,index=0'
  fi
}

##############################
#### CD-ROM
##############################
function create_cdrom {
  cd_args=""
  case "$cdrom.if" in
    "ide")    ;;
    "scsi")   ;;
     *)
       echo "Unknown CD Interface: "$cdrom.if
  esac
  cd_args=$cd_args' -drive if='$cdrom.if',aio=native'
  if [[ x$cdrom.iso != x ]]; then
    if [[ ! -f $cdrom.iso ]]; then
        echo "Specified iso file does not exist."
        exit 11
    fi
    cd_args=$cd_args',file='$cdrom.iso
  fi
  cd_args=$cd_args',index='$disk_num',media=cdrom'
}

##############################
### Boot order
##############################
function create_bootorder
{
  boot_args=""
  if [[ x$boot.order != x ]]; then
    boot_args=$boot.order
  fi
}

##############################
#### Network
##############################
function create_network_adaptor
{
  net_args=""
  idx=0
  while [[ x${network.type[$idx]} != x ]];
  do

    nic_arg=""
    
    if [[ x${network.name[$idx]} == x ]]; then
      echo "Need NIC synbol name: "$idx
      exit 13
    fi
    if [[ x${network.model[$idx]} == x ]]; then
      nic_model[$idx]=$DEF_NIC
    fi

    nic_arg='-netdev '${network.type[$idx]}',id='${network.name[$idx]}
    case "${netwrok.type[$idx]}" in
      "bridge")
        net_args=$net_args' '$nic_arg
        nic_arg='-net bridge'
        if [[ ! -z "${network.vlan[$idx]}" ]]; then
          nic_arg=$nic_arg',vlan='${network.vlan[$idx]}
        fi
        nic_arg=$nic_arg',br='${network.bridge[$idx]}
        ;;
      "tap")
        if [[ x${network.vhost[$idx]} != x && ${network.vhost[$idx]} == 'y' ]]; then
          nic_arg=$nic_arg',vhost=on'
          network.model[$idx]=$DEF_NIC
        fi
        net_args=$net_args' '$nic_arg
        nic_arg='-net tap'
        if [[ ! -z "${network.vlan[$idx]}" ]]; then
          nic_arg=$nic_arg',vlan='${netwrok.vlan[$idx]}
        fi
        if [[ x${network.if[$idx]} == x ]]; then
          echo "Need NIC interface name: "$idx
          exit 13
        fi
        nic_arg=$nic_arg',ifname='${network.if[$idx]}
        if [[ x${network.ifup[$idx]} == x ]]; then
          nic_arg=$nic_arg',script=no'
        else
          nic_arg=$nic_arg',script='${network.ifup[$idx]}
        fi
        if [[ x${network.ifdown[$idx]} != x ]]; then
          nic_arg=$nic_arg',downscript=='${network.ifdown[$idx]}
        fi
        ;;
      *)
        echo "Unknown NIC type: "${network.name[$idx]}
        exit 13
        ;;
    esac
    net_args=$net_args' '$nic_arg

    nic_arg='-net nic'
    if [[ ${network.vlan[$idx]} ]]; then
      nic_arg=$nic_arg',vlan='${network.vlan[$idx]}
    fi
    if [[ ${network.addr[$idx]} ]]; then
      nic_arg=$nic_arg',macaddr='${network.addr[$idx]}
    fi
    nic_arg=$nic_arg',model='${network.model[$idx]}
    nic_arg=$nic_arg',netdev='${network.name[$idx]}',name='${network.name[$idx]}
    net_args=$net_args' '$nic_arg
    
    ((idx=idx+1))
    
  done
}

##############################
#### Display
##############################
function create_display
{
  case "$display.type" in
    vnc)
      disp_args=' -vga '$graphics.type' -vnc '$vnc.addr:$vnc.number
      ;;
    spice)
      disp_args=' -vga qxl -spice addr='$spice.addr',port='$spice.port
      if [[ $spice.sasl == 'y' ]];then
        disp_args=$disp_args',sasl'
      else
        disp_args=$disp_args',disable-ticketing'
      fi
      if [[ $spice_tls == 'y' ]]; then
        if [[ x$spice.tls_port == x || x$ssl.SSLDIR == x ]]; then
          echo 'Need both TLS port and SSL cert dir specified.'
          exit 14
        fi
        disp_args=$disp_args',tls-port='$spice.tls_port',x509-dir='$ssl.SSLDIR
      fi
      ;;
    sdl)
      disp_args=' -vga '$graphics.type' -sdl'
      ;;
    none)
      disp_args=' -display none'
      ;;
    off)
      disp_args=' -nographic'
      ;;
    *)
      echo 'Illegal display: '$display.type
      exit 14
      ;;
  esac  
}

##############################
#### Keyboard
##############################
function create_kbd
{
  kbd_args=
  if [[ x$keyboard.lang != x ]]; then
    kbd_args='-k '$keyboard.lang
  fi
}

##############################
#### Keyboard
##############################
function create_rtc
{
  rtc_args='-rtc'
  if [[ $clock.utctime == 'n' ]]; then
    rtc_args=$rtc_args' base=localtime'
  else
    rtc_args=$rtc_args' base=utc'
  fi
  if [[ $clock.sync_host == 'n' ]]; then
    rtc_args=$rtc_args',clock=vm'
  else
    rtc_args=$rtc_args',clock=host'
  fi
}

##############################
#### Create Run Directory
##############################
function create_rundir
{
    vmrundir=$system.RUNDIR/$vm
    if [[ ! -d $vmrundir ]]; then
        $SUDO mkdir -p $vmrundir
        if [[ x$user.runas != x ]]; then
          $SUDO chown $user.runas:$user.runas $vmrundir
        fi
    fi
}

##############################
#### Serial Port Socket
##############################
function get_serial
{
  serial_port=$system.RUNDIR/$vm/serial.sock
}

##############################
#### Monitor Port Socket
##############################
function get_monitor
{
  monitor_port=$system.RUNDIR/$vm/monitor.sock
}

##############################
#### PID file
##############################
function get_pid_file
{
  pid_file=$system.RUNDIR/$vm/$vm.pid
}

##############################
#### Serial & Monitor
##############################
function create_console
{
  get_serial
  s_args='-serial unix:'$serial_port',server,nowait'
  get_monitor
  m_args='-monitor unix:'$monitor_port',server,nowait'
  console_args=$s_args' '$m_args
}

#-device virtio-serial
#-chardev socket,path=/tmp/foo,server,nowait,id=foo \
#-chardev socket,path=/tmp/bar,server,nowait,id=bar \
#-device virtioconsole,chardev=foo,name=org.fedoraproject.console.foo
#-device virtioconsole,chardev=bar,name=org.fedoraproject.console.bar

#############################
#### Build Command Line
#############################
function build_cmdline
{
  create_cpu
  create_mem
  create_disk_drive
  create_floppy
  create_cdrom
  create_bootorder
  create_network_adaptor
  create_display
  create_kbd
  create_console
  create_rtc
  get_pid_file

  if [[ $system.QEMU == 'kvm' ]]; then
    CMDLINE=$system.QEMU
  else
    CMDLINE=$system.QEMU' -enable-kvm'
  fi
  CMDLINE=$CMDLINE' -daemonize -runas '$runas' '$cpu_args' '$mem_args
  CMDLINE=$CMDLINE' '$boot_args
  CMDLINE=$CMDLINE' '$disk_args' '$cd_args' '$fd_args
  CMDLINE=$CMDLINE' '$net_args' '$kbd_args
  CMDLINE=$CMDLINE' '$disp_args' '$console_args' '$rtc_args
  CMDLINE=$CMDLINE' -pidfile '$pid_file

  if [[ x$args != x ]]; then
    CMDLINE=$CMDLINE' '$args
  fi
}

### Read configuratio file

function read_conf_file
{
`awk $1 <<<EOAS

BEGIN {
  DISKS    = 0;
  NICS     = 0;
  CSECTION = "";
}

/^[ \ta-zA-Z0-9_-+!@$%^&\\\/.:]+/ {
  pos   = index($0, "=");
  if (pos > 0)
  {
    left  = substr($0, 1, pos - 1);
    right = substr($0, pos + 1, length($0) - pos);
    gsub("^[ \t]+" ,"", left);
    gsub("[ \t]+$" ,"", left);
    gsub("^[ \t]+" ,"", right);
    gsub("[ \t]+$" ,"", right);
    left = tolower(left);
    if (match(CSECTION, "disk") > 0)
    {
      left = sprintf("%s[%d]", left, DISKS);
    }
    if (match(CSECTION, "network") > 0)
    {
      left = sprintf("%s[%d]", left, NICS);
    }
    printf ("%s.%s=%s\n", CSECTION, left, right);
  }
}

/^[ \t]*\[[a-zA-Z0-9_-+!@$%^&\\\/.:]+/ {
  gsub("^[ \t]+" ,"", $1);
  gsub("[ \t]+$" ,"", $1);
  gsub("^\[" ,"", $1);
  gsub("\]$" ,"", $1);
  CSECTION = $1;
  if (match(CSECTION,"disk") > 0)
  {
    DISKS = DISKS + 1;
  }
  if (match(CSECTION, "network") > 0)
  {
    NICS = NICS + 1;
  }
}
EOAS`
}
########################################
### Read configuration
########################################
function read_conf
{
  set_default_values

  def_conf=$SYSDIR/vmmaestro.conf

  if [ ! -f $def_conf ]; then
    echo You must place vmmaestro.conf in $SYSDIR
    exit 3
  fi
  read_conf_file $def_conf

  vm_conf=$SYSDIR/$vm.conf

  if [ ! -f $vm_conf ]; then
    echo You must place $vm.conf in $SYSDIR
    exit 3
  fi
  read_conf_file $vm_conf
}

########################################
### Destroy configuration
########################################
function del_conf
{
  unset vm
  unset cpu_cores
  unset cpu_threads
  unset cpu_sockets
  unset nic_type
  unset nic_addr
  unset nic_name
  unset nic_model
  unset nic_vlan
  unset nic_vhost
  unset nic_bridge
  unset nic_if
  unset nic_ifup
  unset nic_ifdown
  unset diskvg
  unset disk_lv
  unset disk_if
  unset disk_fmt
  unset use_dp
  unset aio_type
  unset iso
  unset lang
  unset floppy
  unset display
  unset spice_port
  unset spice_tls_port
  unset runas
  unset SASL_CONF_PATH
  unset SSLDIR
}

########################################
### Is running process
########################################
function proc_check
{
  get_pid_file

  $SUDO kill -0 `$SUDO cat $pid_file`
}

########################################
### start vm
########################################
function start_vm
{
  create_rundir

  build_cmdline
  $E $SUDO $CMDLINE

  delay=0

  proc_check
  while [[ ($?) && $delay < $boot_qemu_delay ]];
  do
    sleep 1
    proc_check
    ((delay=delay+1))
  done

  if [[ $boot_qemu_delay == $delay ]]; then
      echo Failed to start $vm
      exit 20
  fi
}

########################################
### shutdown vm
########################################
function shutdown_vm
{
  get_monitor
  echo system_powerdown | $SUDO socat - UNIX-CONNECT:$monitor_port
  delay=0
  proc_check
  while [[ ! $? && $delay < $boot_qemu_delay ]];
  do
    sleep 1
    proc_check
    ((delay=delay+1))
  done

  if [[ $boot_qemu_delay == $delay ]]; then
      echo Failed to shutdown $vm
      exit 21
  fi
}

########################################
### stop vm
########################################
function stop_vm
{
  get_monitor
  echo quit | $SUDO socat - UNIX-CONNECT:$monitor_port
  delay=0
  proc_check
  while [[ ! $? && $delay < $boot_qemu_delay ]];
  do
    sleep 1
    proc_check
    ((delay=delay+1))
  done

  if [[ $boot_qemu_delay == $delay ]]; then
      echo Failed to stop $vm
      exit 22
  fi
}

########################################
### stauts
########################################
function status_vm
{
  echo -n $vm" "
  proc_check
  if [[ ! $? ]]; then
    echo is running.
  else
    echo is stopped.
  fi
}

########################################
### Connect to console
########################################
function connect_to_console
{
  clear
  get_serial
  echo For reasons unknown, ^O is the panic button.
  $SUDO socat -,raw,echo=0,escape=0x0f UNIX-CONNECT:$serial_port 
}

########################################
### Connect to monitor
########################################
function connect_to_monitor
{
  clear
  get_monitor
  echo For reasons unknown, ^O is the panic button.
  $SUDO socat -,raw,echo=0,escape=0x0f UNIX-CONNECT:$monitor_port
}

########################################
### main
########################################

if [[ $use_sudo == 'y' ]]; then
  SUDO='sudo'
else
  SUDO=
fi

cmd=$1
shift

while [[ "$1" ]]; do
  vm=$1
  read_conf
  case "$cmd" in
    console|serial|serial0)
      connect_to_console
      ;;
    monitor|kvm|qemu)
      connect_to_monitor
      ;;
    consolestart|cstart)
      start_vm
      connect_to_console
      break
      ;;
    start)
      start_vm
      ;;
    stop)
      stop_vm
      ;;
    shutdown)
      shutdown_vm
      ;;
    restart)
      shutdown_vm
      start_vm
      ;;
    kill)
      get_pid_file
      $SUDO kill -KILL `$SUDO cat $pid_file`
      ;;
    status)
      status_vm
      ;;
    *)
      echo "Unknown command: "$cmd. >&2
      exit 2
      ;;
  esac
  del_conf
  shift
done
