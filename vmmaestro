#! /bin/bash
################################################################################
#
#  vmmaestro - Tiny KVM wrapper shell script
#
#  Copyright (C) 2014 Koichi MATSUMOTO.  All rights reserved.
#
################################################################################

#E=echo

use_sudo='y'

########################################
#### System
########################################

SYSDIR='/etc/vmmaestro'
DEF_NIC='virtio'
DEF_DISKIF='virtio'

boot_qemu_delay=10

########################################
#### Preset Default values
########################################
function set_default_values
{
  cpu_model='host'
  cpu_units=1
  cpu_cores=2
  vmem=1024
  use_balloon='y'
  display='vnc'
  graphics='std'
  vnc_addr='127.0.0.1'
  spice_addr='127.0.0.1'
  vnc_display='0'
  spice_tls='n'
  use_utctime='y'
  sync_host='y'
}

########################################
#### check args
########################################

if [[ $# != 2 ]]; then
  echo 'Usage: '$0' [start|stop|shutdown|restart|kill|console|monitor|status] vm-name,...'
  exit 1
fi

########################################
#### create startup command line
########################################
##############################
#### create CPU
##############################
function create_cpu
{
  cpu_arg='-cpu='$cpu_model' -smp '$cpu_units',cores='$cpu_cores
  
  if [[ x$cpu_threads != x ]]; then
    cpu_args=$cpu_args',threads='$cpu_threads
  fi
  if [[ x$cpu_sockets != x ]]; then
    cpu_args=$cpu_args',sockets='$cpu_sockets
  fi
}

##############################
#### create Memory
##############################
function create_mem
{
  mem_args='-m '$vmem
  if [[ $use_balloon == 'n' ]]; then
    mem_args=$mem_args' -balloon none'
  else
    mem_args=$mem_args' -balloon virtio'
  fi
}

##############################
#### creete drive args
##############################
function create_disk_drive
{
  disk_args=""
  idx=0
  while [[ x${disk_lv[$idx]} != x ]];
  do
    if [[ x$diskvg != x ]]; then
        disk_drive=/dev/$diskvg/${disk_lv[$idx]}
        if [[ ! -b $disk_drive ]]; then
            echo "Specified block device does not exist: "${disk_lv[$idx]}
            exit 10
        fi
    else
        disk_drive=${disk_lv[$idx]}
        if [[ ! -f $disk_drive ]]; then
            echo "Specified disk file does not exist: "$disk_drive
            exit 10
        fi
    fi
    if [[ x${disk_if[$idx]} == x ]]; then
      disk_if[$idx]=$DEF_DISKIF
    fi
    if [[ x${use_aio[$idx]} == x ]]; then
      use_aio[$idx]='n'
    fi
    if [[ ${use_aio[$idx]} == 'y' ]]; then
      drive_id='drive'$idx
      disk_args=$disk_args' -drive if=none,id='$drive_id',cache=none,'
      disk_args=$disk_args'aio=native,format=raw,file='$disk_drive
      disk_args=$disk_args',index='$idx',media=disk'
      disk_args=$disk_args' -device virtio-blk,drive='$drive_id
      disk_args=$disk_args',scsi=off,config-wce=off,x-data-plane=on'
    else
      disk_args=$disk_args' -drive file='$disk_drive',if='${disk_if[$idx]}
      if [[ x${disk_fmt[$idx]} != x ]]; then
        disk_args=$disk_args',format='${disk_fmt[$idx]}
      fi
      disk_args=$disk_args',index='$idx',media=disk'
    fi
    ((idx=idx+1))
  done
}

##############################
#### CD-ROM
##############################
function create_cdrom {
  cd_args=""
  if [[ x$iso != x ]]; then
    if [[ ! -f $iso ]]; then
        echo "Specified iso file does not exist."
        exit 11
    fi
    cd_args='-cdrom '$iso
  fi
}

##############################
#### creete floppy disk
##############################
function create_floppy
{
  fd_args=""
  idx=0
  while [[ x${floppy[$idx]} != x ]];
  do
    fd_file=${floppy[$idx]}
    if [[ ! -f $fd_file ]]; then
        echo "Specified floppy file does not exist: "$fd_file
        exit 12
    fi
    fd_args=$fd_args' -drive file='$fd_file',if=floppy,index='$idx
    ((idx=idx+1))
  done
}

##############################
### Boot order
##############################
function create_bootorder
{
  boot_args=""
  if [[ x$boot_order != x ]]; then
    boot_args=$boot_order
  fi
}

##############################
#### Network
##############################
function create_network_adaptor
{
  net_args=""
  idx=0
  while [[ x${nic_type[$idx]} != x ]];
  do

    nic_arg=""
    
    if [[ x${nic_name[$idx]} == x ]]; then
      echo "Need NIC synbol name: "$idx
      exit 13
    fi
    if [[ x${nic_model[$idx]} == x ]]; then
      nic_model[$idx]=$DEF_NIC
    fi

    nic_arg='-netdev '${nic_type[$idx]}',id='${nic_name[$idx]}
    case "${nic_type[$idx]}" in
      "bridge")
        net_args=$net_args' '$nic_arg
        nic_arg='-net bridge'
        if [[ ! -z "${nic_vlan[$idx]}" ]]; then
          nic_arg=$nic_arg',vlan='${nic_vlan[$idx]}
        fi
        nic_arg=$nic_arg',br='${nic_bridge[$idx]}
        ;;
      "tap")
        if [[ x${nic_vhost[$idx]} != x && ${nic_vhost[$idx]} == 'y' ]]; then
          nic_arg=$nic_arg',vhost=on'
          nic_model[$idx]=$DEF_NIC
        fi
        net_args=$net_args' '$nic_arg
        nic_arg='-net tap'
        if [[ ! -z "${nic_vlan[$idx]}" ]]; then
          nic_arg=$nic_arg',vlan='${nic_vlan[$idx]}
        fi
        if [[ x${nic_if[$idx]} == x ]]; then
          echo "Need NIC interface name: "$idx
          exit 13
        fi
        nic_arg=$nic_arg',ifname='${nic_if[$idx]}
        if [[ x${nic_ifup[$idx]} == x ]]; then
          nic_arg=$nic_arg',script=no'
        else
          nic_arg=$nic_arg',script='${nic_ifup[$idx]}
        fi
        if [[ x${nic_ifdown[$idx]} != x ]]; then
          nic_arg=$nic_arg',downscript=='${nic_ifdown[$idx]}
        fi
        ;;
      *)
        echo "Unknown NIC type: "${nic_name[$idx]}
        exit 13
        ;;
    esac
    net_args=$net_args' '$nic_arg

    nic_arg='-net nic'
    if [[ ${nic_vlan[$idx]} ]]; then
      nic_arg=$nic_arg',vlan='${nic_vlan[$idx]}
    fi
    if [[ ${nic_addr[$idx]} ]]; then
      nic_arg=$nic_arg',macaddr='${nic_addr[$idx]}
    fi
    nic_arg=$nic_arg',model='${nic_model[$idx]}
    nic_arg=$nic_arg',netdev='${nic_name[$idx]}',name='${nic_name[$idx]}
    net_args=$net_args' '$nic_arg
    
    ((idx=idx+1))
    
  done
}

##############################
#### Display
##############################
function create_display
{
  case "$display" in
    vnc)
      disp_args=' -vga '$graphics' -vnc '$vnc_addr:$vnc_display',sasl'
      ;;
    spice)
      disp_args=' -vga qxl -spice sasl,port='$spice_port
      if [[ $spice_tls == 'y' ]]; then
        disp_args=$disp_args',tls-port='$spice_tls_port',x509-dir='$SSLDIR
      fi
      ;;
    *)
      echo 'Illegal display: '$display
      exit 14
      ;;
  esac  
}

##############################
#### Keyboard
##############################
function create_kbd
{
  kbd_args=
  if [[ x$lang != x ]]; then
    kbd_args='-k '$lang
  fi
}

##############################
#### Keyboard
##############################
function create_rtc
{
  rtc_args='-rtc'
  if [[ $use_utctime == 'n' ]]; then
    rtc_args=$rtc_args' base=localtime'
  else
    rtc_args=$rtc_args' base=utc'
  fi
  if [[ $sync_host == 'n' ]]; then
    rtc_args=$rtc_args',clock=vm'
  else
    rtc_args=$rtc_args',clock=host'
  fi
}

##############################
#### Create Run Directory
##############################
function create_rundir
{
    vmrundir=$RUNDIR/$vm
    if [[ ! -d $vmrundir ]]; then
        $SUDO mkdir -p $vmrundir
        $SUDO chown $runas:$runas $vmrundir
    fi
}

##############################
#### Serial Port Socket
##############################
function get_serial
{
  serial_port=$RUNDIR/$vm/serial.sock
}

##############################
#### Monitor Port Socket
##############################
function get_monitor
{
  monitor_port=$RUNDIR/$vm/monitor.sock
}

##############################
#### PID file
##############################
function get_pid_file
{
  pid_file=$RUNDIR/$vm/$vm.pid
}

##############################
#### Serial & Monitor
##############################
function create_console
{
  get_serial
  s_args='-serial unix:'$serial_port',server,nowait'
  get_monitor
  m_args='-monitor unix:'$monitor_port',server,nowait'
  console_args=$s_args' '$m_args
}

#############################
#### Build Command Line
#############################
function build_cmdline
{
  create_cpu
  create_mem
  create_disk_drive
  create_floppy
  create_cdrom
  create_bootorder
  create_network_adaptor
  create_display
  create_kbd
  create_console
  create_rtc
  get_pid_file

  if [[ $QEMU == 'kvm' ]]; then
    CMDLINE=$QEMU
  else
    CMDLINE=$QEMU' -enable-kvm'
  fi
  CMDLINE=$CMDLINE' -daemonize -runas '$runas' '$cpu_args' '$mem_args
  CMDLINE=$CMDLINE' '$boot_args
  CMDLINE=$CMDLINE' '$disk_args' '$cd_args' '$fd_args
  CMDLINE=$CMDLINE' '$net_args' '$kbd_args
  CMDLINE=$CMDLINE' '$disp_args' '$console_args' '$rtc_args
  CMDLINE=$CMDLINE' -pidfile '$pid_file

  if [[ x$args != x ]]; then
    CMDLINE=$CMDLINE' '$args
  fi
}

########################################
### Read configuration
########################################
function read_conf
{
  set_default_values

  def_conf=$SYSDIR/vmmaestro.conf

  if [ ! -f $def_conf ]; then
    echo You must place vmmaestro.conf in $SYSDIR
    exit 3
  fi
  . $def_conf

  vm_conf=$SYSDIR/$vm.conf

  if [ ! -f $vm_conf ]; then
    echo You must place $vm.conf in $SYSDIR
    exit 3
  fi
  . $vm_conf
}

########################################
### Destroy configuration
########################################
function del_conf
{
  unset vm
  unset cpu_threads
  unset cpu_sockets
  unset nic_type
  unset nic_addr
  unset nic_name
  unset nic_model
  unset nic_vlan
  unset nic_vhost
  unset nic_bridge
  unset diskvg
  unset disk_lv
  unset disk_if
  unset disk_fmt
  unset use_aio
  unset iso
  unset lang
  unset runas
  unset floppy
  unset display
  unset spice_port
  unset spice_tls_port
  unset runas
  unset SASL_CONF_PATH
  unset SSLDIR
}

########################################
### Is running process
########################################
function proc_check
{
  get_pid_file

  $SUDO kill -0 `$SUDO cat $pid_file`
}

########################################
### start vm
########################################
function start_vm
{
  create_rundir

  build_cmdline
  $E $SUDO $CMDLINE

  delay=0

  proc_check
  while [[ ($?) && $delay < $boot_qemu_delay ]];
  do
    sleep 1
    proc_check
    ((delay=delay+1))
  done

  if [[ $boot_qemu_delay == $delay ]]; then
      echo Failed to start $vm
      exit 20
  fi
}

########################################
### shutdown vm
########################################
function shutdown_vm
{
  get_monitor
  echo system_powerdown | $SUDO socat - UNIX-CONNECT:$monitor_port
  delay=0
  proc_check
  while [[ ! $? && $delay < $boot_qemu_delay ]];
  do
    sleep 1
    proc_check
    ((delay=delay+1))
  done
}

########################################
### stop vm
########################################
function stop_vm
{
  get_monitor
  echo quit | $SUDO socat - UNIX-CONNECT:$monitor_port
  delay=0
  proc_check
  while [[ ! $? && $delay < $boot_qemu_delay ]];
  do
    sleep 1
    proc_check
    ((delay=delay+1))
  done
}

########################################
### stauts
########################################
function status_vm
{
  echo -n $vm" "
  proc_check
  if [[ ! $? ]]; then
    echo is running.
  else
    echo is stopped.
  fi
}

########################################
### main
########################################

if [[ $use_sudo == 'y' ]]; then
  SUDO='sudo'
else
  SUDO=
fi

cmd=$1
shift

while [[ "$1" ]]; do
  vm=$1
  read_conf
  case "$cmd" in
    console|serial|serial0)
      echo For reasons unknown, ^O is the panic button.
      $SUDO socat -,raw,echo=0,escape=0x0f UNIX-CONNECT:$drawer/serial0.sock
      ;;
    monitor|kvm|qemu)
      echo For reasons unknown, ^O is the panic button.
      $SUDO socat -,raw,echo=0,escape=0x0f UNIX-CONNECT:$drawer/qemu.sock
      ;;
    start)
      start_vm
      ;;
    stop)
      stop_vm
      ;;
    shutdown)
      shutdown_vm
      ;;
    restart)
      shutdown_vm
      start_vm
      ;;
    kill)
      get_pid_file
      $SUDO kill -KILL `$SUDO cat $pid_file`
      ;;
    status)
      status_vm
      ;;
    *)
      echo "Unknown command: "$cmd. >&2
      exit 2
      ;;
  esac
  del_conf
  shift
done
